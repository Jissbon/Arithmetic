//
// ThreeSum.swift
//  LeeCode
//
//  Created by 庞日富 on 2021/5/1.
//

import Foundation

class ThreeSum {
    static func threeSum(_ nums: [Int]) -> [[Int]] {
        
        
        
        if nums.count < 3 {
            return []
        }
        
        //1.把数组重排,左边小右边大
        let sortedNums = nums.sorted()
        
        var result = [[Int]]()
        
        for i in 0...sortedNums.count-1 {
            
            //如果判断到了大于零的数,说明后面的数字相加不可能等于0
            if sortedNums[i] > 0 {
                return result
            }
            
            //去重
            if i > 0  && sortedNums[i] == sortedNums[i-1] {
              continue
            }
            
            
            //取i的下一位
            var L = i+1
            //取数组右侧第一位;
            var R = sortedNums.count-1
                
            while L < R {
                

                if sortedNums[i] + sortedNums[L] + sortedNums[R] == 0 {
                    result.append([sortedNums[i],sortedNums[L],sortedNums[R]])
                    print("i:\(i),L\(L),R:\(R)")
                    print("\([sortedNums[i],sortedNums[L],sortedNums[R]])")
                    
                    //[i:2,L14,R:39,[-66, 10, 56]
                    while L < R  &&  sortedNums[L] == sortedNums[L+1]{
                        L=L+1
                    }
                    
                    while L < R && sortedNums[R] == sortedNums[R-1] {
                        R-=1
                    }
                    L += 1
                    
                }else if sortedNums[i] + sortedNums[L] + sortedNums[R] > 0 {
                    R -= 1
                }else{
                    L += 1
                }
            }
        }
        
        return result
    }
}

//[-82,-70,-66,-49,-43,-29,-29,-14,-11,-6,-3,-3,1,2,10,12,13,15,15,17]
/*
 [-82,-70,-66,-49,-43,-29,-29,-14,-11,-6,-3,-3,1,2,10,12,13,15,15,17,21,26,26,28,28,29,31,33,34,36,43,46,46,47,48,49,52,55,55,56,57,61,62,65,69,71,74,76,77,79,83,84,86,93,94]
 */
/* 正确答案
 [[-82,-11,93],[-82,13,69],[-82,17,65],[-82,21,61],[-82,26,56],[-82,33,49],[-82,34,48],[-82,36,46],[-70,-14,84],[-70,-6,76],[-70,1,69],[-70,13,57],[-70,15,55],[-70,21,49],[-70,34,36],[-66,-11,77],[-66,-3,69],[-66,1,65],[-66,10,56],[-66,17,49],[-49,-6,55],[-49,-3,52],[-49,1,48],[-49,2,47],[-49,13,36],[-49,15,34],[-49,21,28],[-43,-14,57],[-43,-6,49],[-43,-3,46],[-43,10,33],[-43,12,31],[-43,15,28],[-43,17,26],[-29,-14,43],[-29,1,28],[-29,12,17],[-14,-3,17],[-14,1,13],[-14,2,12],[-11,-6,17],[-11,1,10],[-3,1,2]]
 */

/*
  测试结果:
 [[-82,-11,93],[-82,13,69],[-82,17,65],[-82,21,61],[-82,26,56],[-82,33,49],[-82,34,48],[-82,36,46],[-70,-14,84],[-70,-6,76],[-70,1,69],[-70,13,57],[-70,15,55],[-70,21,49],[-70,34,36],[-66,-11,77],[-66,-3,69],[-66,1,65],[-66,10,56],[-66,17,49],[-49,-6,55],[-49,-3,52],[-49,1,48],[-49,2,47],[-49,13,36],[-49,15,34],[-49,21,28],[-43,-14,57],[-43,-6,49],[-43,-3,46],[-43,10,33],[-43,12,31],[-43,15,28],[-43,17,26],[-29,-14,43],[-29,1,28],[-29,12,17]]
*/

//
