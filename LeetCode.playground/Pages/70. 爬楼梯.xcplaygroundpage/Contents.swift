//: [Previous](@previous)

import Foundation

/*
 题目:
 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 n是一个正整数 > 0
 
 示例 1：
 输入： 2
 输出： 2
 解释： 有两种方法可以爬到楼顶。
 1.  1 阶 + 1 阶
 2.  2 阶
 
 示例 2：
 输入： 3
 输出： 3
 解释： 有三种方法可以爬到楼顶。
 1.  1 阶 + 1 阶 + 1 阶
 2.  1 阶 + 2 阶
 3.  2 阶 + 1 阶
 
 */


/*解题思路
 
 楼梯阶数 : 上楼梯的方案
 
 1 阶    :  1种 (1)
 2 阶    :  2种 (1+1) / (2)
 3 阶    :  3中 (1+1+1) / (1 + 2) / (2 + 1)
 f(3) = f(1) + f(2)
 //注: 上第3阶的情况只有可能从 第1阶 或 第2阶 直接上去,所以我们只要求出 上到 第1阶 和 第2阶 分别有几种情况然后相加就可以
 
 4阶     :  (1+1+1+1)/(2+2)/(1+1+2)/(2+1+1)/(1+2+1)
 f(4) = f(3) + f(2)
 */


// 数学思想: 斐波那契额数列
// 优化思路: 缓存上一级的结果.
func climbStairs(_ n: Int) -> Int {
    
    var f1:Int = 1
    var f2:Int = 2
    var f3:Int = 3
    
    if n < 3 {
        return n
    }
    
    for _ in 3...n {
        f3 = f1 + f2
        f1 = f2
        f2 = f3
    }
    
    return f3
    
}

print(climbStairs(6))

